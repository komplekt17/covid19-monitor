{"version":3,"sources":["styles/Cards.module.css","components/Cards.js","api/index.js","components/Chart.js","components/CountryPicker.js","App.js","serviceWorker.js","index.js","styles/App.module.css","styles/Chart.module.css","styles/CountryPicker.module.css","images/covid-full.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","CircularProgress","url","fetchData","nameCountry","a","ChangeableUrl","axios","get","response","modifiedData","console","log","fetchDailyData","map","itemData","total","date","reportDate","fetchCountries","countries","country","name","Chart","useState","dailyData","setDailyData","useEffect","result","getFetchResult","lineChart","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","setCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","setData","setCountry","image","src","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.12499632.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__16Ihd\",\"card\":\"Cards_card__2tspC\",\"infected\":\"Cards_infected__30fDc\",\"recovered\":\"Cards_recovered__3yFdc\",\"deaths\":\"Cards_deaths__20YgE\"};","import React from 'react';\r\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\n\r\nimport { CircularProgress } from '@material-ui/core';\r\nimport styles from '../styles/Cards.module.css';\r\n\r\nexport const Cards = ({\r\n\tdata: { confirmed, recovered, deaths, lastUpdate },\r\n}) => {\r\n\t// console.log({ data });\r\n\r\n\tif (!confirmed) return <CircularProgress color=\"secondary\" />;\r\n\r\n\treturn (\r\n\t\t<div className={styles.container}>\r\n\t\t\t<Grid container spacing={3} justify=\"center\">\r\n\t\t\t\t<Grid\r\n\t\t\t\t\titem\r\n\t\t\t\t\tcomponent={Card}\r\n\t\t\t\t\txs={12}\r\n\t\t\t\t\tmd={3}\r\n\t\t\t\t\tclassName={cx(styles.card, styles.infected)}\r\n\t\t\t\t>\r\n\t\t\t\t\t<CardContent>\r\n\t\t\t\t\t\t<Typography color=\"textSecondary\" gutterBottom>\r\n\t\t\t\t\t\t\tInfected\r\n\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t<Typography variant=\"h5\">\r\n\t\t\t\t\t\t\t<CountUp\r\n\t\t\t\t\t\t\t\tstart={0}\r\n\t\t\t\t\t\t\t\tend={confirmed.value}\r\n\t\t\t\t\t\t\t\tduration={2.5}\r\n\t\t\t\t\t\t\t\tseparator=\".\"\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t<Typography color=\"textSecondary\">\r\n\t\t\t\t\t\t\t{new Date(lastUpdate).toDateString()}\r\n\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t<Typography variant=\"body2\">\r\n\t\t\t\t\t\t\tNumber of active cases of COVID-19\r\n\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t</CardContent>\r\n\t\t\t\t</Grid>\r\n\t\t\t\t<Grid\r\n\t\t\t\t\titem\r\n\t\t\t\t\tcomponent={Card}\r\n\t\t\t\t\txs={12}\r\n\t\t\t\t\tmd={3}\r\n\t\t\t\t\tclassName={cx(styles.card, styles.recovered)}\r\n\t\t\t\t>\r\n\t\t\t\t\t<CardContent>\r\n\t\t\t\t\t\t<Typography color=\"textSecondary\" gutterBottom>\r\n\t\t\t\t\t\t\tRecovered\r\n\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t<Typography variant=\"h5\">\r\n\t\t\t\t\t\t\t<CountUp\r\n\t\t\t\t\t\t\t\tstart={0}\r\n\t\t\t\t\t\t\t\tend={recovered.value}\r\n\t\t\t\t\t\t\t\tduration={2.5}\r\n\t\t\t\t\t\t\t\tseparator=\".\"\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t<Typography color=\"textSecondary\">\r\n\t\t\t\t\t\t\t{new Date(lastUpdate).toDateString()}\r\n\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t<Typography variant=\"body2\">\r\n\t\t\t\t\t\t\tNumber of active cases of COVID-19\r\n\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t</CardContent>\r\n\t\t\t\t</Grid>\r\n\t\t\t\t<Grid\r\n\t\t\t\t\titem\r\n\t\t\t\t\tcomponent={Card}\r\n\t\t\t\t\txs={12}\r\n\t\t\t\t\tmd={3}\r\n\t\t\t\t\tclassName={cx(styles.card, styles.deaths)}\r\n\t\t\t\t>\r\n\t\t\t\t\t<CardContent>\r\n\t\t\t\t\t\t<Typography color=\"textSecondary\" gutterBottom>\r\n\t\t\t\t\t\t\tDeaths\r\n\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t<Typography variant=\"h5\">\r\n\t\t\t\t\t\t\t<CountUp\r\n\t\t\t\t\t\t\t\tstart={0}\r\n\t\t\t\t\t\t\t\tend={deaths.value}\r\n\t\t\t\t\t\t\t\tduration={2.5}\r\n\t\t\t\t\t\t\t\tseparator=\".\"\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t<Typography color=\"textSecondary\">\r\n\t\t\t\t\t\t\t{new Date(lastUpdate).toDateString()}\r\n\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t<Typography variant=\"body2\">\r\n\t\t\t\t\t\t\tNumber of active cases of COVID-19\r\n\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t</CardContent>\r\n\t\t\t\t</Grid>\r\n\t\t\t</Grid>\r\n\t\t</div>\r\n\t);\r\n};\r\n","import axios from 'axios';\r\n\r\nconst url = 'https://covid19.mathdro.id/api';\r\n\r\nexport const fetchData = async (nameCountry) => {\r\n\tlet ChangeableUrl = url;\r\n\r\n\tif (nameCountry) ChangeableUrl = `${url}/countries/${nameCountry}`;\r\n\r\n\ttry {\r\n\t\tconst response = await axios.get(ChangeableUrl);\r\n\t\tconst { data } = response;\r\n\r\n\t\tconst modifiedData = {\r\n\t\t\tconfirmed: data.confirmed,\r\n\t\t\trecovered: data.recovered,\r\n\t\t\tdeaths: data.deaths,\r\n\t\t\tlastUpdate: data.lastUpdate,\r\n\t\t};\r\n\r\n\t\treturn modifiedData;\r\n\t} catch (error) {\r\n\t\tconsole.log('FetchData error: ', error);\r\n\t}\r\n};\r\n\r\nexport const fetchDailyData = async () => {\r\n\ttry {\r\n\t\tconst response = await axios.get(`${url}/daily`);\r\n\t\tconst { data } = response;\r\n\t\tconst modifiedData = data.map((itemData) => {\r\n\t\t\treturn {\r\n\t\t\t\tconfirmed: itemData.confirmed.total,\r\n\t\t\t\tdeaths: itemData.deaths.total,\r\n\t\t\t\trecovered: itemData.recovered.total,\r\n\t\t\t\tdate: itemData.reportDate,\r\n\t\t\t};\r\n\t\t});\r\n\r\n\t\treturn modifiedData;\r\n\t} catch (error) {\r\n\t\tconsole.log('FetchDailyData error: ', error);\r\n\t}\r\n};\r\n\r\nexport const fetchCountries = async () => {\r\n\ttry {\r\n\t\tconst response = await axios.get(`${url}/countries`);\r\n\t\tconst {\r\n\t\t\tdata: { countries },\r\n\t\t} = response;\r\n\r\n\t\t// console.log(data);\r\n\t\treturn countries.map((country) => {\r\n\t\t\treturn country.name;\r\n\t\t});\r\n\t} catch (error) {\r\n\t\tconsole.log('FetchCountriesData error: ', error);\r\n\t}\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Line, Bar } from 'react-chartjs-2';\r\n\r\nimport { fetchDailyData } from '../api';\r\nimport styles from '../styles/Chart.module.css';\r\n\r\nexport const Chart = ({ data, country }) => {\r\n\tconst { confirmed, recovered, deaths } = data;\r\n\tconst [dailyData, setDailyData] = useState({});\r\n\r\n\tuseEffect(() => {\r\n\t\tconst getFetchResult = async () => {\r\n\t\t\tconst result = await fetchDailyData();\r\n\t\t\tsetDailyData(result);\r\n\t\t};\r\n\r\n\t\tgetFetchResult();\r\n\t}, []);\r\n\r\n\tconst lineChart = dailyData[0] ? (\r\n\t\t<Line\r\n\t\t\tdata={{\r\n\t\t\t\tlabels: dailyData.map(({ date }) => date),\r\n\t\t\t\tdatasets: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdata: dailyData.map(({ confirmed }) => confirmed),\r\n\t\t\t\t\t\tlabel: 'Infected',\r\n\t\t\t\t\t\tborderColor: '#3333ff',\r\n\t\t\t\t\t\tfill: true,\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdata: dailyData.map(({ deaths }) => deaths * 1.5),\r\n\t\t\t\t\t\tlabel: 'Recovered',\r\n\t\t\t\t\t\tborderColor: 'green',\r\n\t\t\t\t\t\tbackgroundColor: 'rgba(0, 255, 0, 0.5)',\r\n\t\t\t\t\t\tfill: true,\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdata: dailyData.map(({ deaths }) => deaths),\r\n\t\t\t\t\t\tlabel: 'Deaths',\r\n\t\t\t\t\t\tborderColor: 'red',\r\n\t\t\t\t\t\tbackgroundColor: 'rgba(250, 0, 0, 0.5)',\r\n\t\t\t\t\t\tfill: true,\r\n\t\t\t\t\t},\r\n\t\t\t\t],\r\n\t\t\t}}\r\n\t\t/>\r\n\t) : null;\r\n\r\n\tconst barChart = confirmed ? (\r\n\t\t<Bar\r\n\t\t\tdata={{\r\n\t\t\t\tlabels: ['Infected', 'Recovered', 'Deaths'],\r\n\t\t\t\tdatasets: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlabel: 'People',\r\n\t\t\t\t\t\tbackgroundColor: [\r\n\t\t\t\t\t\t\t'rgba(0, 0, 255, 0.5)',\r\n\t\t\t\t\t\t\t'rgba(0, 255, 0, 0.5)',\r\n\t\t\t\t\t\t\t'rgba(255, 0, 0, 0.5)',\r\n\t\t\t\t\t\t],\r\n\t\t\t\t\t\tdata: [confirmed.value, recovered.value, deaths.value],\r\n\t\t\t\t\t},\r\n\t\t\t\t],\r\n\t\t\t}}\r\n\t\t\toptions={{\r\n\t\t\t\tlegend: { display: true },\r\n\t\t\t\ttitle: { display: true, text: `Current state in ${country}` },\r\n\t\t\t}}\r\n\t\t/>\r\n\t) : null;\r\n\r\n\treturn (\r\n\t\t<div className={styles.container}>\r\n\t\t\t{country ? barChart : lineChart}\r\n\t\t</div>\r\n\t);\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport { NativeSelect, FormControl } from '@material-ui/core';\r\n\r\nimport { fetchCountries } from '../api';\r\nimport styles from '../styles/CountryPicker.module.css';\r\n\r\nexport const CountryPicker = ({ handleCountryChange }) => {\r\n\tconst [countries, setCountries] = useState([]);\r\n\r\n\tuseEffect(() => {\r\n\t\tconst getFetchResult = async () => {\r\n\t\t\tconst result = await fetchCountries();\r\n\t\t\tsetCountries(result);\r\n\t\t\t// console.log(result);\r\n\t\t};\r\n\r\n\t\tgetFetchResult();\r\n\t}, [setCountries]);\r\n\r\n\treturn (\r\n\t\t<FormControl className={styles.formControl}>\r\n\t\t\t<NativeSelect\r\n\t\t\t\tdefaultValue=\"\"\r\n\t\t\t\tonChange={(e) => handleCountryChange(e.target.value)}\r\n\t\t\t>\r\n\t\t\t\t<option value=\"\">Global</option>\r\n\t\t\t\t{countries.map((country, i) => (\r\n\t\t\t\t\t<option key={i} value={country}>\r\n\t\t\t\t\t\t{country}\r\n\t\t\t\t\t</option>\r\n\t\t\t\t))}\r\n\t\t\t</NativeSelect>\r\n\t\t</FormControl>\r\n\t);\r\n};\r\n","import React, { useState, useEffect } from 'react';\nimport { CountryPicker, Cards, Chart } from './components';\n\nimport { fetchData } from './api';\nimport styles from './styles/App.module.css';\nimport image from './images/covid-full.png';\n\nfunction App() {\n\tconst [data, setData] = useState({});\n\tconst [country, setCountry] = useState('');\n\n\tuseEffect(() => {\n\t\tconst getFetchResult = async () => {\n\t\t\tconst result = await fetchData();\n\t\t\tsetData(result);\n\t\t};\n\n\t\tgetFetchResult();\n\t}, []);\n\n\tconst handleCountryChange = async (nameCountry) => {\n\t\tconst data = await fetchData(nameCountry);\n\n\t\tsetCountry(nameCountry);\n\t\tsetData(data);\n\t};\n\n\treturn (\n\t\t<div className={styles.container}>\n\t\t\t<img className={styles.image} src={image} alt=\"COVID-19\" />\n\t\t\t<Cards data={data} />\n\t\t\t<CountryPicker handleCountryChange={handleCountryChange} />\n\t\t\t<Chart data={data} country={country} />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__Jgjkx\",\"image\":\"App_image__IvGgL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__Xk8yv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"CountryPicker_container__2triF\",\"formControl\":\"CountryPicker_formControl__1k_qW\"};","module.exports = __webpack_public_path__ + \"static/media/covid-full.758cb721.png\";"],"sourceRoot":""}